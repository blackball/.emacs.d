;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode c++-mode
      :tags 
        '( ("../SerialPort.h" include nil nil [1 27])
            ("../Logger.h" include nil nil [28 50])
            ("stdio.h" include (:system-flag t) nil [51 69])
            ("main" function
               (:arguments 
                  ( ("argc" variable (:type "int") (reparse-symbol arg-sub-list) [80 89])
                    ("argv" variable
                       (:pointer 1
                        :dereference 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [90 103]))                  
                :type "int")
                nil [71 1026]))          
      :file "TestSerialPort.cpp"
      :pointmax 1027
      :fsize 1026
      :lastmodtime '(23870 21121 394895 466000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode c++-mode
      :tags 
        '( ("../Logger.h" include nil nil [1 23])
            ("main" function
               (:arguments 
                  ( ("argc" variable (:type "int") (reparse-symbol arg-sub-list) [34 43])
                    ("argv" variable
                       (:pointer 1
                        :dereference 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [44 57]))                  
                :type "int")
                nil [25 149]))          
      :file "TestLogger.cpp"
      :pointmax 150
      :fsize 149
      :lastmodtime '(23899 45176 436713 993000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode c++-mode
      :tags 
        '( ("../SerialPort.h" include nil nil [54 80])
            ("../Logger.h" include nil nil [81 103])
            ("stdio.h" include (:system-flag t) nil [104 122])
            ("unistd.h" include (:system-flag t) nil [193 212])
            ("delay_ms" variable (:constant-flag t) nil [221 229])
            ("Projector_Open" function
               (:arguments 
                  ( ("DeviceName" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [285 308]))                  
                :type ("SerialPort" type (:type "class") nil nil))
                nil [259 541])
            ("Projector_Close" function
               (:arguments 
                  ( ("projector" variable (:type ("SerialPort" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [562 583]))                  
                :type "int")
                nil [542 627])
            ("Projector_Project" function
               (:arguments 
                  ( ("projector" variable (:type ("SerialPort" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [651 672])
                    ("loop" variable (:type ("uint8_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [673 686]))                  
                :type "int")
                nil [629 1441])
            ("main" function
               (:arguments 
                  ( ("argc" variable (:type "int") (reparse-symbol arg-sub-list) [1452 1461])
                    ("argv" variable
                       (:pointer 1
                        :dereference 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [1462 1475]))                  
                :type "int")
                nil [1443 2584]))          
      :file "TestX1.cpp"
      :pointmax 2585
      :fsize 2584
      :lastmodtime '(23899 43677 732273 670000)
      :unmatched-syntax nil
      :lexical-table 
        '(("delay_ms" (spp-arg-list ("x") 229 . 232) . ((symbol "usleep" 233 . 239) (semantic-list "((x)*1000)" 239 . 249)))
          )
))
  :file "!home!rvbust!Rvbust!Sources!RVC!Src!Tests!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
