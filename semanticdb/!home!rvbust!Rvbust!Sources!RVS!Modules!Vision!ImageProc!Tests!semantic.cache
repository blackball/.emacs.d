;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("cv2" include nil nil [96 106])
            ("numpy" include nil nil [107 125])
            ("math" include nil nil [126 137])
            ("time" include nil nil [138 149])
            ("logging" include nil nil [150 164])
            ("cProfile" include nil nil [166 181])
            ("profile" function (:arguments 
              ( ("func" variable nil (reparse-symbol function_parameters) [195 199]))              ) nil [183 460])
            ("profileit" function (:arguments 
              ( ("func" variable nil (reparse-symbol function_parameters) [474 478]))              ) nil [460 750])
            ("_Probility_In_Range" function (:arguments 
              ( ("hist_prob" variable nil (reparse-symbol function_parameters) [775 784])
                ("indexi" variable nil (reparse-symbol function_parameters) [786 792])
                ("indexj" variable nil (reparse-symbol function_parameters) [794 800]))              ) nil [751 1053])
            ("_Total_Size_In_Range" function (:arguments 
              ( ("hist_value" variable nil (reparse-symbol function_parameters) [1079 1089])
                ("indexi" variable nil (reparse-symbol function_parameters) [1091 1097])
                ("indexj" variable nil (reparse-symbol function_parameters) [1099 1105]))              ) nil [1054 1240])
            ("_Mean_In_Range" function (:arguments 
              ( ("hist_value" variable nil (reparse-symbol function_parameters) [1260 1270])
                ("indexi" variable nil (reparse-symbol function_parameters) [1272 1278])
                ("indexj" variable nil (reparse-symbol function_parameters) [1280 1286]))              ) nil [1241 1600])
            ("_Variance_In_Range" function (:arguments 
              ( ("hist_value" variable nil (reparse-symbol function_parameters) [1624 1634])
                ("indexi" variable nil (reparse-symbol function_parameters) [1636 1642])
                ("indexj" variable nil (reparse-symbol function_parameters) [1644 1650]))              ) nil [1601 2182])
            ("Calc_sub_histValue_sum" function (:arguments 
              ( ("hist" variable nil (reparse-symbol function_parameters) [2210 2214])
                ("index" variable nil (reparse-symbol function_parameters) [2216 2221]))              ) nil [2183 2326])
            ("Calc_sub_histValue_isum" function (:arguments 
              ( ("hist" variable nil (reparse-symbol function_parameters) [2355 2359])
                ("index" variable nil (reparse-symbol function_parameters) [2361 2366]))              ) nil [2327 2475])
            ("Calc_sub_histValue_iisum" function (:arguments 
              ( ("hist" variable nil (reparse-symbol function_parameters) [2505 2509])
                ("index" variable nil (reparse-symbol function_parameters) [2511 2516]))              ) nil [2476 2629])
            ("is_bimodal_hist" function (:arguments 
              ( ("hist" variable nil (reparse-symbol function_parameters) [2739 2743])
                ("size" variable nil (reparse-symbol function_parameters) [2745 2749]))              ) nil [2719 3009])
            ("first_last_nonzero_bin" function (:arguments 
              ( ("hist_value" variable nil (reparse-symbol function_parameters) [3037 3047])
                ("size" variable nil (reparse-symbol function_parameters) [3049 3053]))              ) nil [3010 3329])
            ("size_Img" function (:arguments 
              ( ("img" variable nil (reparse-symbol function_parameters) [3343 3346]))              ) nil [3330 3402])
            ("Calc_Hist_Value" function
               (:decorators 
                  ( ("profile" function (:type "decorator") nil nil))                  
                :arguments 
                  ( ("img" variable nil (reparse-symbol function_parameters) [3431 3434]))                  )
                nil [3402 3507])
            ("Calc_Hist_Cumulative_Value" function (:arguments 
              ( ("hist" variable nil (reparse-symbol function_parameters) [3539 3543]))              ) nil [3508 3573])
            ("Calc_Hist_Cumulative_iValue" function (:arguments 
              ( ("hist" variable nil (reparse-symbol function_parameters) [3606 3610])
                ("size" variable nil (reparse-symbol function_parameters) [3612 3616]))              ) nil [3574 3692])
            ("Calc_Hist_Inverse" function (:arguments 
              ( ("hist" variable nil (reparse-symbol function_parameters) [3715 3719]))              ) nil [3693 3747])
            ("Cal_Hist_Probility" function
               (:decorators 
                  ( ("profile" function (:type "decorator") nil nil))                  
                :arguments 
                  ( ("hist_value" variable nil (reparse-symbol function_parameters) [3779 3789])
                    ("size" variable nil (reparse-symbol function_parameters) [3791 3795]))                  )
                nil [3747 3837])
            ("Cal_Hist_Cumulative_Probility" function (:arguments 
              ( ("hist_prob" variable nil (reparse-symbol function_parameters) [3872 3881])
                ("size" variable nil (reparse-symbol function_parameters) [3883 3887]))              ) nil [3838 3922])
            ("Cal_Hist_Cumulative_Probility_Complement" function (:arguments 
              ( ("hist_prob" variable nil (reparse-symbol function_parameters) [3968 3977])
                ("size" variable nil (reparse-symbol function_parameters) [3979 3983]))              ) nil [3923 4022])
            ("Cal_Hist_Cumulative_Probility_square1" function (:arguments 
              ( ("hist_prob" variable nil (reparse-symbol function_parameters) [4065 4074])
                ("size" variable nil (reparse-symbol function_parameters) [4076 4080]))              ) nil [4023 4127])
            ("Cal_Hist_Cumulative_Probility_square2" function (:arguments 
              ( ("hist_prob" variable nil (reparse-symbol function_parameters) [4170 4179])
                ("size" variable nil (reparse-symbol function_parameters) [4181 4185]))              ) nil [4128 4325])
            ("Hist_Trim" function (:arguments 
              ( ("hist" variable nil (reparse-symbol function_parameters) [4340 4344]))              ) nil [4326 4459])
            ("_Mean" function (:arguments 
              ( ("I" variable nil (reparse-symbol function_parameters) [4579 4580]))              ) nil [4569 4643])
            ("Binarize" function (:arguments 
              ( ("img" variable nil (reparse-symbol function_parameters) [4834 4837])
                ("t" variable nil (reparse-symbol function_parameters) [4839 4840]))              ) nil [4821 4923])
            ("Global_Mean1" function (:arguments 
              ( ("I" variable nil (reparse-symbol function_parameters) [4941 4942]))              ) nil [4924 4988])
            ("Global_Mean2" function (:arguments 
              ( ("I" variable nil (reparse-symbol function_parameters) [5006 5007]))              ) nil [4989 5115])
            ("IsoData" function (:arguments 
              ( ("I" variable nil (reparse-symbol function_parameters) [5128 5129]))              ) nil [5116 5235])
            ("Otsu" function (:arguments 
              ( ("I" variable nil (reparse-symbol function_parameters) [5245 5246]))              ) nil [5236 5437])
            ("Triangle" function (:arguments 
              ( ("I" variable nil (reparse-symbol function_parameters) [5451 5452]))              ) nil [5438 5583])
            ("Yen" function (:arguments 
              ( ("I" variable nil (reparse-symbol function_parameters) [5592 5593]))              ) nil [5584 6043])
            ("Shanbhag" function (:arguments 
              ( ("I" variable nil (reparse-symbol function_parameters) [6057 6058]))              ) nil [6044 6456])
            ("MaxEntropy" function (:arguments 
              ( ("I" variable nil (reparse-symbol function_parameters) [6472 6473]))              ) nil [6457 6873])
            ("RenyiEntropy" function (:arguments 
              ( ("I" variable nil (reparse-symbol function_parameters) [6891 6892]))              ) nil [6874 7294])
            ("Moments" function (:arguments 
              ( ("I" variable nil (reparse-symbol function_parameters) [7307 7308]))              ) nil [7295 7493])
            ("Intermodes" function (:arguments 
              ( ("I" variable nil (reparse-symbol function_parameters) [7509 7510]))              ) nil [7494 7645])
            ("MinErrorI" function (:arguments 
              ( ("I" variable nil (reparse-symbol function_parameters) [7660 7661]))              ) nil [7646 7860])
            ("Minimum" function (:arguments 
              ( ("I" variable nil (reparse-symbol function_parameters) [7873 7874]))              ) nil [7861 8006])
            ("Li" function (:arguments 
              ( ("I" variable nil (reparse-symbol function_parameters) [8014 8015]))              ) nil [8007 8149])
            ("Huang" function (:arguments 
              ( ("I" variable nil (reparse-symbol function_parameters) [8160 8161]))              ) nil [8150 8291])
            ("Default" function (:arguments 
              ( ("I" variable nil (reparse-symbol function_parameters) [8304 8305]))              ) nil [8292 8417])
            ("Percentile" function (:arguments 
              ( ("I" variable nil (reparse-symbol function_parameters) [8437 8438]))              ) nil [8422 8631])
            ("GetIndicesInCircle" function (:arguments 
              ( ("radius" variable nil (reparse-symbol function_parameters) [8656 8662]))              ) nil [8633 9041])
            ("GetROI" function
               (:decorators 
                  ( ("profile" function (:type "decorator") nil nil))                  
                :arguments 
                  ( ("I" variable nil (reparse-symbol function_parameters) [9062 9063])
                    ("r" variable nil (reparse-symbol function_parameters) [9065 9066])
                    ("c" variable nil (reparse-symbol function_parameters) [9068 9069])
                    ("radius" variable nil (reparse-symbol function_parameters) [9071 9077])
                    ("I_bordered" variable nil (reparse-symbol function_parameters) [9079 9089]))                  )
                nil [9042 9272])
            ("GetROIWithoutBorder" function (:arguments 
              ( ("I" variable nil (reparse-symbol function_parameters) [9297 9298])
                ("r" variable nil (reparse-symbol function_parameters) [9300 9301])
                ("c" variable nil (reparse-symbol function_parameters) [9303 9304])
                ("radius" variable nil (reparse-symbol function_parameters) [9306 9312])
                ("I_bordered" variable nil (reparse-symbol function_parameters) [9314 9324]))              ) nil [9273 9822])
            ("Make_Border" function (:arguments 
              ( ("I" variable nil (reparse-symbol function_parameters) [9839 9840])
                ("radius" variable nil (reparse-symbol function_parameters) [9842 9848]))              ) nil [9823 10011])
            ("local_mean" function (:arguments 
              ( ("I" variable nil (reparse-symbol function_parameters) [10027 10028])
                ("r" variable nil (reparse-symbol function_parameters) [10030 10031])
                ("c" variable nil (reparse-symbol function_parameters) [10033 10034])
                ("radius" variable nil (reparse-symbol function_parameters) [10036 10042])
                ("I_bordered" variable nil (reparse-symbol function_parameters) [10044 10054]))              ) nil [10012 10111])
            ("local_min" function (:arguments 
              ( ("I" variable nil (reparse-symbol function_parameters) [10126 10127])
                ("r" variable nil (reparse-symbol function_parameters) [10129 10130])
                ("c" variable nil (reparse-symbol function_parameters) [10132 10133])
                ("radius" variable nil (reparse-symbol function_parameters) [10135 10141])
                ("I_bordered" variable nil (reparse-symbol function_parameters) [10143 10153]))              ) nil [10112 10209])
            ("local_max" function (:arguments 
              ( ("I" variable nil (reparse-symbol function_parameters) [10224 10225])
                ("r" variable nil (reparse-symbol function_parameters) [10227 10228])
                ("c" variable nil (reparse-symbol function_parameters) [10230 10231])
                ("radius" variable nil (reparse-symbol function_parameters) [10233 10239])
                ("I_bordered" variable nil (reparse-symbol function_parameters) [10241 10251]))              ) nil [10210 10307])
            ("local_median" function (:arguments 
              ( ("I" variable nil (reparse-symbol function_parameters) [10325 10326])
                ("r" variable nil (reparse-symbol function_parameters) [10328 10329])
                ("c" variable nil (reparse-symbol function_parameters) [10331 10332])
                ("radius" variable nil (reparse-symbol function_parameters) [10334 10340])
                ("I_bordered" variable nil (reparse-symbol function_parameters) [10342 10352]))              ) nil [10308 10413])
            ("local_standard_deviation" function (:arguments 
              ( ("I" variable nil (reparse-symbol function_parameters) [10443 10444])
                ("r" variable nil (reparse-symbol function_parameters) [10446 10447])
                ("c" variable nil (reparse-symbol function_parameters) [10449 10450])
                ("radius" variable nil (reparse-symbol function_parameters) [10452 10458])
                ("I_bordered" variable nil (reparse-symbol function_parameters) [10460 10470]))              ) nil [10414 10717])
            ("local_standard_deviation1" function (:arguments 
              ( ("I" variable nil (reparse-symbol function_parameters) [10748 10749])
                ("r" variable nil (reparse-symbol function_parameters) [10751 10752])
                ("c" variable nil (reparse-symbol function_parameters) [10754 10755])
                ("radius" variable nil (reparse-symbol function_parameters) [10757 10763])
                ("I_bordered" variable nil (reparse-symbol function_parameters) [10765 10775]))              ) nil [10718 10851])
            ("Mean_Local" function
               (:documentation "
    currently this function only supports 8-bit greyscale image I
    radius < Min(I.rows, I.cols)
    pixel = ( pixel > mean - c_value ) ? object : background
    "
                :arguments 
                  ( ("I" variable nil (reparse-symbol function_parameters) [10867 10868])
                    ("radius" variable nil (reparse-symbol function_parameters) [10870 10876])
                    ("c_value" variable nil (reparse-symbol function_parameters) [10878 10885]))                  )
                nil [10852 11537])
            ("Median_Local" function
               (:documentation "
    currently this function only supports 8-bit greyscale image I
    radius < Min(I.rows, I.cols)
    pixel = ( pixel > median - c_value ) ? object : background
    "
                :arguments 
                  ( ("I" variable nil (reparse-symbol function_parameters) [11555 11556])
                    ("radius" variable nil (reparse-symbol function_parameters) [11558 11564])
                    ("c_value" variable nil (reparse-symbol function_parameters) [11566 11573]))                  )
                nil [11538 12111])
            ("MidGrey_Local" function
               (:documentation "
    currently this function only supports 8-bit greyscale image I
    radius < Min(I.rows, I.cols)
    pixel = ( pixel > ( ( max + min ) / 2 ) - c_value ) ? object : background
    "
                :arguments 
                  ( ("I" variable nil (reparse-symbol function_parameters) [12130 12131])
                    ("radius" variable nil (reparse-symbol function_parameters) [12133 12139])
                    ("c_value" variable nil (reparse-symbol function_parameters) [12141 12148]))                  )
                nil [12112 12830])
            ("Contrast_Local" function
               (:documentation "
    currently this function only supports 8-bit greyscale image I
    radius < Min(I.rows, I.cols)
    It depends on whether its current value is closest to the local maximum or minimum respectively
    "
                :arguments 
                  ( ("I" variable nil (reparse-symbol function_parameters) [12851 12852])
                    ("radius" variable nil (reparse-symbol function_parameters) [12854 12860]))                  )
                nil [12832 13535])
            ("Bernsen_Local" function
               (:documentation "
    currently this function only supports 8-bit greyscale image I
    radius < Min(I.rows, I.cols)
    default contrast_threshold = 15, reassign this value if contrast_threshold_par is not 0
    The method uses a user-provided contrast threshold. If the local contrast (max-min) is above or equal to the contrast threshold, 
    the threshold is set at the local midgrey value (the mean of the minimum and maximum grey values in the local window). 
    If the local contrast is below the contrast threshold the neighbourhood is considered to consist only of one class and 
    the pixel is set to object or background depending on the value of the midgrey.
    "
                :arguments 
                  ( ("I" variable nil (reparse-symbol function_parameters) [13555 13556])
                    ("radius" variable nil (reparse-symbol function_parameters) [13558 13564])
                    ("contrast_threshold_par" variable nil (reparse-symbol function_parameters) [13566 13588]))                  )
                nil [13537 15045])
            ("Niblack_Local" function
               (:documentation "
    currently this function only supports 8-bit greyscale image I
    radius < Min(I.rows, I.cols)
    default contrast_threshold = 15, reassign this value if contrast_threshold_par is not 0
    pixel = ( pixel >  mean + k * standard_deviation - c) ? object : background
    Parameter 1: is the k value. Any other number than 0 will change the default value.
    Parameter 2: is the C value. This is an offset with a default value of 0. Any other number than 0 will change its value.
    "
                :arguments 
                  ( ("I" variable nil (reparse-symbol function_parameters) [15064 15065])
                    ("radius" variable nil (reparse-symbol function_parameters) [15067 15073])
                    ("k" variable nil (reparse-symbol function_parameters) [15075 15076])
                    ("C" variable nil (reparse-symbol function_parameters) [15078 15079]))                  )
                nil [15046 16071])
            ("Otsu_Local" function
               (:documentation "
    currently this function only supports 8-bit greyscale image I
    radius < Min(I.rows, I.cols)
    The algorithm searches for the threshold that minimizes the intra-class variance, 
    defined as a weighted sum of variances of the two classes
    The local set is a circular ROI and the central pixel is tested against the Otsu threshold found for that region.
    "
                :arguments 
                  ( ("I" variable nil (reparse-symbol function_parameters) [16087 16088])
                    ("radius" variable nil (reparse-symbol function_parameters) [16090 16096]))                  )
                nil [16072 17021])
            ("Otsu_Local_No_Border" function
               (:documentation "
    currently this function only supports 8-bit greyscale image I
    radius < Min(I.rows, I.cols)
    The algorithm searches for the threshold that minimizes the intra-class variance, 
    defined as a weighted sum of variances of the two classes
    The local set is a circular ROI and the central pixel is tested against the Otsu threshold found for that region.
    "
                :arguments 
                  ( ("I" variable nil (reparse-symbol function_parameters) [17048 17049])
                    ("radius" variable nil (reparse-symbol function_parameters) [17051 17057]))                  )
                nil [17023 17995])
            ("Sauvola_Local" function
               (:documentation "
    currently this function only supports 8-bit greyscale image I
    radius < Min(I.rows, I.cols)
    pixel = ( pixel > mean * ( 1 + k * ( standard_deviation / r - 1 ) ) ) ? object : background
    Parameter 1: is the k value. The default value is 0.5. Any other number than 0 will change the default value.
    Parameter 2: is the r value. The default value is 128. Any other number than 0 will change the default value
    "
                :arguments 
                  ( ("I" variable nil (reparse-symbol function_parameters) [18014 18015])
                    ("radius" variable nil (reparse-symbol function_parameters) [18017 18023])
                    ("k" variable nil (reparse-symbol function_parameters) [18025 18026])
                    ("r" variable nil (reparse-symbol function_parameters) [18028 18029]))                  )
                nil [17996 19096])
            ("Phansalkar_Local" function
               (:documentation "
    currently this function only supports 8-bit greyscale image I
    radius < Min(I.rows, I.cols)
    This is a modification of Sauvola's thresholding method to deal with low contrast images.
    the threshold t = mean*(1+p*exp(-q*mean)+k*((stdev/r)-1))
    Phansalkar recommends k = 0.25, r = 0.5, p = 2 and q = 10. 
    "
                :arguments 
                  ( ("I" variable nil (reparse-symbol function_parameters) [19119 19120])
                    ("radius" variable nil (reparse-symbol function_parameters) [19122 19128])
                    ("k" variable nil (reparse-symbol function_parameters) [19130 19131])
                    ("r" variable nil (reparse-symbol function_parameters) [19133 19134]))                  )
                nil [19098 20435])
            ("_GetValOnIsoData" function (:arguments 
              ( ("hist_value" variable nil (reparse-symbol function_parameters) [20457 20467])
                ("size" variable nil (reparse-symbol function_parameters) [20469 20473]))              ) nil [20436 20918])
            ("_GetValOnOtsu" function
               (:documentation "
    hist_value is frequency histogram for 8-bit / 16-bit image
    hist_prob is probability histogram corresponding to hist_value
    hist_size is the length of hist_value

    Reference: https://en.wikipedia.org/wiki/Otsu%27s_method
    get max inter-class variance : variance = prob0 * prob1 * (mean0 - mean1) * (mean0 - mean1)
    variance = (Sk * N - Nk * S)(Sk * N - Nk * S) / (N * N * N1 * (N - N1))
    Sk = hist_value[0] * 0 + hist_value[1] * 1 + .... + hist_value[k] * K // Intensity
    N = the size of image (row * col)
    N1 =  hist_value[0] + hist_value[1]  + .... + hist_value[k]
    "
                :arguments 
                  ( ("hist_value" variable nil (reparse-symbol function_parameters) [20937 20947])
                    ("hist_prob" variable nil (reparse-symbol function_parameters) [20949 20958])
                    ("hist_size" variable nil (reparse-symbol function_parameters) [20960 20969]))                  )
                nil [20919 22343])
            ("_GetValOnTriganle" function
               (:documentation "
    hist_value is frequency histogram for 8-bit / 16-bit image
    size is 2**8 or 2**16

    Reference: https://journals.sagepub.com/doi/pdf/10.1177/25.7.70454
    constructs a line between the histogram peak and the farthest end of the histogram.
    The threshold is the point of maximum distance between the line and the histogram.
    "
                :arguments 
                  ( ("hist_value" variable nil (reparse-symbol function_parameters) [22366 22376])
                    ("size" variable nil (reparse-symbol function_parameters) [22378 22382]))                  )
                nil [22344 24890])
            ("_GetValOnYen" function
               (:documentation "
    hist_cum_prob: cumulative probability histogram
    hist_cum_prob_sq1: hist_cum_prob_sq1 cumulative probability square from index 0 to size -1
    hist_cum_prob_sq2: cumulative probability square from index size - 1 to 0

    thresholding based on a maximum correlation criterion
    criterion = -log(p1_sq(i) * p2_sq(i)) + 2log(p(i) * (1 - p(i)))
    "
                :arguments 
                  ( ("hist_cum_prob" variable nil (reparse-symbol function_parameters) [24909 24922])
                    ("hist_cum_prob_sq1" variable nil (reparse-symbol function_parameters) [24924 24941])
                    ("hist_cum_prob_sq2" variable nil (reparse-symbol function_parameters) [24943 24960])
                    ("size" variable nil (reparse-symbol function_parameters) [24962 24966]))                  )
                nil [24892 25825])
            ("_GetValOnShanbhag" function
               (:documentation "
    size is 2**8 or 2**16
    Reference: http://sci-hub.tw/10.1006/cgip.1994.1037#
    minimize info1 - info2
    "
                :arguments 
                  ( ("hist_value" variable nil (reparse-symbol function_parameters) [25849 25859])
                    ("hist_prob" variable nil (reparse-symbol function_parameters) [25861 25870])
                    ("hist_cum_prob" variable nil (reparse-symbol function_parameters) [25872 25885])
                    ("hist_cum_prob_complement" variable nil (reparse-symbol function_parameters) [25887 25911])
                    ("size" variable nil (reparse-symbol function_parameters) [25913 25917]))                  )
                nil [25827 26899])
            ("_GetValOnMaxEntropy" function (:arguments 
              ( ("hist_value" variable nil (reparse-symbol function_parameters) [26924 26934])
                ("hist_prob" variable nil (reparse-symbol function_parameters) [26936 26945])
                ("hist_cum_prob" variable nil (reparse-symbol function_parameters) [26947 26960])
                ("hist_cum_prob_complement" variable nil (reparse-symbol function_parameters) [26962 26986])
                ("size" variable nil (reparse-symbol function_parameters) [26988 26992]))              ) nil [26900 27825])
            ("_GetValOnRenyiEntropy" function
               (:documentation "
    Similar to the MaxEntropy method, but using Renyi's entropy instead.
    "
                :arguments 
                  ( ("hist_value" variable nil (reparse-symbol function_parameters) [27852 27862])
                    ("hist_prob" variable nil (reparse-symbol function_parameters) [27864 27873])
                    ("hist_cum_prob" variable nil (reparse-symbol function_parameters) [27875 27888])
                    ("hist_cum_prob_complement" variable nil (reparse-symbol function_parameters) [27890 27914])
                    ("size" variable nil (reparse-symbol function_parameters) [27916 27920]))                  )
                nil [27826 30916])
            ("_GetValOnMoments" function
               (:documentation "
    reference: https://people.cs.nctu.edu.tw/~whtsai/Journal%20Paper%20PDFs/Tsai_CVGIP(journal)_1985.pdf
    moments: mi = sum(pj * ((zj)**i)
    nj total of picels in image with gray level zj
    pj = nj /n
    "
                :arguments 
                  ( ("hist_prob" variable nil (reparse-symbol function_parameters) [30939 30948])
                    ("size" variable nil (reparse-symbol function_parameters) [30949 30953]))                  )
                nil [30918 32412])
            ("_GetValOnIntermodes" function
               (:documentation "
    The histogram is iteratively smoothed using a running average of size 3, 
    until there are only two local maxima: j and k. 
    The threshold t is then computed as (j+k)/2.  
    A histogram with two peaks is called \"bimodal\" 
    "
                :arguments 
                  ( ("hist_value" variable nil (reparse-symbol function_parameters) [32437 32447])
                    ("size" variable nil (reparse-symbol function_parameters) [32449 32453]))                  )
                nil [32413 33415])
            ("_GetValOnMinErrorI" function
               (:documentation "
    Reference: http://sci-hub.tw/10.1016/0031-3203(86)90030-0
    sometimes this algorithm does not converge to a solution.
    return default threshold which is computed using mean method
    1. choose an aritrary initail threshold T,
    2. compute mean i, variance i, pi, i = 1,2
    3. compute the updated threshold by solving quadratic equation according to Reference equation 22 
    4, if the new threshold equals the previous one then terminate the algorithm, else go to step 2
    "
                :arguments 
                  ( ("hist_value" variable nil (reparse-symbol function_parameters) [33439 33449])
                    ("hist_prob" variable nil (reparse-symbol function_parameters) [33451 33460])
                    ("size" variable nil (reparse-symbol function_parameters) [33462 33466]))                  )
                nil [33416 35489])
            ("_GetValOnMinimum" function
               (:documentation "
    Similarly to the Intermodes method, this assumes a bimodal histogram. The histogram is iteratively smoothed using a running average of size 3, 
    until there are only two local maxima. The threshold t is such that yt−1 > yt <= yt+1.
    Images with histograms having extremely unequal peaks or a broad and ﬂat valley are unsuitable for this method.
    Threshold t is such that yt−1 > yt ≤ yt+1.
    "
                :arguments 
                  ( ("hist_value" variable nil (reparse-symbol function_parameters) [35511 35521])
                    ("size" variable nil (reparse-symbol function_parameters) [35523 35527]))                  )
                nil [35490 36669])
            ("_GetValOnLi" function
               (:documentation "
    Implements Li's Minimum Cross Entropy thresholding method
    
    "
                :arguments 
                  ( ("hist_value" variable nil (reparse-symbol function_parameters) [36686 36696])
                    ("size" variable nil (reparse-symbol function_parameters) [36698 36702])
                    ("total_pixels" variable nil (reparse-symbol function_parameters) [36704 36716]))                  )
                nil [36670 37463])
            ("_GetValOnHuang" function
               (:documentation "
    Reference: http://www.ktl.elf.stuba.sk/study/vacso/Zadania-Cvicenia/Cvicenie_3/TimA2/Huang_E016529624.pdf
    This uses Shannon's entropy function
    "
                :arguments 
                  ( ("hist_value" variable nil (reparse-symbol function_parameters) [37483 37493])
                    ("size" variable nil (reparse-symbol function_parameters) [37495 37499]))                  )
                nil [37464 38982])
            ("_GetValOnDefault" function
               (:documentation "
    default is variation of the IsoData algorithm 
    "
                :arguments 
                  ( ("hist_value" variable nil (reparse-symbol function_parameters) [39004 39014])
                    ("size" variable nil (reparse-symbol function_parameters) [39016 39020]))                  )
                nil [38983 39577])
            ("_GetValOnPercentile" function
               (:documentation "
    percent: in (0, 1)
    "
                :arguments 
                  ( ("hist_prob" variable nil (reparse-symbol function_parameters) [39602 39611])
                    ("percent" variable nil (reparse-symbol function_parameters) [39613 39620])
                    ("size" variable nil (reparse-symbol function_parameters) [39622 39626]))                  )
                nil [39578 39956]))          
      :file "Binarization.py"
      :pointmax 39956
      :fsize 39963
      :lastmodtime '(23907 42278 903270 275000)
      :unmatched-syntax '((NAME 29640 . 29647) (IF 29686 . 29688) (ELSE 29716 . 29720) (NAME 28830 . 28837) (IF 28876 . 28878) (ELSE 28906 . 28910) (NAME 25546 . 25551) (IF 25610 . 25612) (ELSE 25659 . 25663) (NAME 25413 . 25418) (IF 25480 . 25482) (ELSE 25531 . 25535) (NAME 20369 . 20376) (IF 20389 . 20391) (ELSE 20404 . 20408) (NAME 18964 . 18971) (IF 18984 . 18986) (ELSE 19060 . 19064) (NAME 17928 . 17935) (IF 17948 . 17950) (ELSE 17968 . 17972) (NAME 16954 . 16961) (IF 16974 . 16976) (ELSE 16994 . 16998) (NAME 15966 . 15973) (IF 15986 . 15988) (ELSE 16039 . 16043) (NAME 14975 . 14982) (IF 14995 . 14997) (ELSE 15018 . 15022) (NAME 14895 . 14902) (IF 14915 . 14917) (ELSE 14934 . 14938) (NAME 13416 . 13423) (IF 13436 . 13438) (ELSE 13508 . 13512) (NAME 12683 . 12690) (IF 12703 . 12705) (ELSE 12761 . 12765) (NAME 12033 . 12040) (IF 12053 . 12055) (ELSE 12084 . 12088) (NAME 11362 . 11369) (IF 11382 . 11384) (ELSE 11416 . 11420))))
  :file "!home!rvbust!Rvbust!Sources!RVS!Modules!Vision!ImageProc!Tests!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
