;; Object Snake/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "Snake/"
  :tables
  (list
    (semanticdb-table "Snake.py"
      :major-mode 'python-mode
      :tags 
        '( ("types" include nil nil [96 117])
            ("os" include nil nil [96 117])
            ("sys" include nil nil [96 117])
            ("argparse" include nil nil [118 161])
            ("Modules" include nil nil [162 183])
            ("Modules.Utils" include nil nil [184 211])
            ("Modules.DataServer" include nil nil [212 278])
            ("ContigousIntergration" include nil nil [279 315])
            ("g_rvbust_config" variable nil nil [317 391])
            ("GetSnakeModuleNames" function (:documentation " Try to get the snake supported modules from globals(). Used by list command. 
    This will try to return (names, descriptions)
    ") nil [393 942])
            ("CollectValidModules" function nil nil [943 1663])
            ("ConstructGSources" function (:arguments 
              ( ("name_modules" variable nil (reparse-symbol function_parameters) [1686 1698]))              ) nil [1664 1942])
            ("GetAttr" function
               (:documentation "Get a class or function from a module (.py file)
    modulename: should be exactly the same name with the module in globals()
    objname: class name or function name, etc, should be exact too. 
    "
                :arguments 
                  ( ("modulename" variable nil (reparse-symbol function_parameters) [1955 1965])
                    ("objname" variable nil (reparse-symbol function_parameters) [1967 1974])
                    ("verbose" variable nil (reparse-symbol function_parameters) [1976 1983]))                  )
                nil [1943 2612])
            ("g_usagestr" variable nil nil [2613 3060])
            ("Snake" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3134 3158])
                            ("self" variable nil (reparse-symbol indented_block_body) [3175 3364])
                            ("self" variable nil (reparse-symbol indented_block_body) [3374 3408])
                            ("try" code nil (reparse-symbol indented_block_body) [3417 3811]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3100 3104])
                            ("globalconfig" variable nil (reparse-symbol function_parameters) [3106 3118]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3087 3811])
                    ("Process" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3836 3840])
                            ("argv" variable nil (reparse-symbol function_parameters) [3842 3846]))                          )
                        (reparse-symbol indented_block_body) [3824 4526])
                    ("List_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4557 4561])
                            ("argv" variable nil (reparse-symbol function_parameters) [4563 4567]))                          )
                        (reparse-symbol indented_block_body) [4547 4771])
                    ("Build_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4803 4807])
                            ("argv" variable nil (reparse-symbol function_parameters) [4809 4813]))                          )
                        (reparse-symbol indented_block_body) [4792 6229])
                    ("Install_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6259 6263])
                            ("argv" variable nil (reparse-symbol function_parameters) [6265 6269]))                          )
                        (reparse-symbol indented_block_body) [6246 8400])
                    ("Setup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8427 8431])
                            ("argv" variable nil (reparse-symbol function_parameters) [8433 8437]))                          )
                        (reparse-symbol indented_block_body) [8417 9272])
                    ("UpdateServerSources" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9309 9313])
                            ("argv" variable nil (reparse-symbol function_parameters) [9315 9319]))                          )
                        (reparse-symbol indented_block_body) [9285 9365])
                    ("ContigousIntergration_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9397 9401])
                            ("branchname" variable nil (reparse-symbol function_parameters) [9403 9413]))                          )
                        (reparse-symbol indented_block_body) [9370 9449]))                  
                :type "class")
                nil [3062 9449])
            ("Main" function nil nil [9458 9782])
            ("if" code nil nil [9787 9825]))          
      :file "Snake.py"
      :pointmax 9825
      :fsize 9822
      :lastmodtime '(23790 19749 680389 527000)
      :unmatched-syntax nil))
  :file "!home!rvbust!Rvbust!Sources!Snake!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
